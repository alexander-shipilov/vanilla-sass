@import "../assert";
@import "../func";
@import "index";

@include assert("array-concat($array: array, $values...: arglist): should push non-list values", (
  array-concat((1, 2)) equal (1, 2),
  array-concat((1, 2), null) equal (1, 2, null),
  array-concat((1, 2), 3) equal (1, 2, 3),
  array-concat((1, 2), 3, 4) equal (1, 2, 3, 4),
  array-concat((1, 2), (foo: 1)) equal (1, 2, (foo: 1)),
));

@include assert("array-concat($array: array, $values...: arglist): should return a list", (
  type-of(array-concat((1, 2))) equal list,
  type-of(array-concat((1, 2), 1)) equal list,
  type-of(array-concat((foo: 1, bar: 2))) equal list,
  type-of(array-concat((foo: 1, bar: 2), 1)) equal list,
  type-of(array-concat(func-arglist(1, 2))) equal list,
  type-of(array-concat(func-arglist(1, 2), 1)) equal list,
));

@include assert("array-concat($array: array, $values...: arglist): should join list values", (
    array-concat((1, 2), (3, 4)) equal (1, 2, 3, 4),
    array-concat((1, 2), func-arglist(3, 4)) equal (1, 2, 3, 4),
    array-concat((1, 2), (3, 4), func-arglist(5, 6)) equal (1, 2, 3, 4, 5, 6),
));

@include assert("array-concat($array: array, $values...: arglist): should preserve separator and brackets", (
  array-is-bracketed(array-concat(1 2)) equal false,
  array-is-bracketed(array-concat(to-list(1 2, $is-bracketed: true))) equal true,
  array-separator(array-concat((1, 2))) equal comma,
  array-separator(array-concat(1 2)) equal space,
));

@include assert("array-concat($array: array, $values...: arglist): should validate passed params", (
    (array-concat, null) throws "ArgumentError: Invalid argument `$array` of `array-concat($array: array, $values...: arglist)`. Expected value of array, instead given null",
));