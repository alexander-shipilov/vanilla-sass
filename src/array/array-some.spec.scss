@import "../assert";
@import "../spy";
@import "index";

@function ge($number, $value, $other...) {
  @return $number >= $value;
}

@include assert("array-some($array: array, $callback: callable): tests whether all elements in the array pass the test implemented by the provided callable", (
  array-some((11, 12, 1, 2), (ge, 10)) is-true,
  array-some((11, 12, 13, 14), (ge, 10)) is-false,
  array-some((), (ge, 10)) is-false,
));

@include void() {
  $array: (13, 12, 11);
  $spy: spy((ge, 12));
  $result: array-some($array, (spy-call, $spy));

  @include assert("array-some($array: array, $callback: callable): should call passed callable with ($value: ?any, $index: number, $array: array)", (
    spy-length($spy) equal 2,
    spy-nth($spy, 1) equal (args: (13, 1, $array), return: false, error: null),
    spy-nth($spy, 2) equal (args: (12, 2, $array), return: true, error: null),
  ));
}

@include assert("array-some($array: array, $callback: callable): should validate passed params", (
    (array-some, null) throws "ArgumentError: Invalid argument `$array` of `array-some($array: array, $callback: callable)`. Expected value of array, instead given null",
    (array-some, (), null) throws "ArgumentError: Invalid argument `$callback` of `array-some($array: array, $callback: callable)`. Expected value of callable, instead given null",
));
