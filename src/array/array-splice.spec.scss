@import "../assert";
@import "to-list";
@import "array-is-bracketed";
@import "array-separator";
@import "array-splice";

@include assert("array-splice($array: array, $start: integer, $count: integer, $values...: arglist): changes the contents of an array by removing existing elements and/or adding new elements", (
  array-splice((1, 2)) equal (1, 2),

  array-splice((1, 2), 0, 0, foo, bar) equal (foo, bar, 1, 2),
  array-splice((1, 2), 0, 1, foo, bar) equal (foo, bar, 2),
  array-splice((1, 2), 0, 2, foo, bar) equal (foo, bar),
  array-splice((1, 2), 0, 3, foo, bar) equal (foo, bar),

  array-splice((1, 2), 1, 0, foo, bar) equal (foo, bar, 1, 2),
  array-splice((1, 2), 1, 1, foo, bar) equal (foo, bar, 2),
  array-splice((1, 2), 1, 2, foo, bar) equal (foo, bar),
  array-splice((1, 2), 1, 3, foo, bar) equal (foo, bar),

  array-splice((1, 2), 2, 0, foo, bar) equal (1, foo, bar, 2),
  array-splice((1, 2), 2, 1, foo, bar) equal (1, foo, bar),
  array-splice((1, 2), 2, 2, foo, bar) equal (1, foo, bar),

  array-splice((1, 2), 3, 0, foo, bar) equal (1, 2, foo, bar),
  array-splice((1, 2), 3, 1, foo, bar) equal (1, 2, foo, bar),

  array-splice((1, 2), -1, 0, foo, bar) equal (1, foo, bar, 2),
  array-splice((1, 2), -1, 1, foo, bar) equal (1, foo, bar),
  array-splice((1, 2), -1, 2, foo, bar) equal (1, foo, bar),

  array-splice((1, 2), -2, 0, foo, bar) equal (foo, bar, 1, 2),
  array-splice((1, 2), -2, 1, foo, bar) equal (foo, bar, 2),
  array-splice((1, 2), -2, 2, foo, bar) equal (foo, bar),

  array-splice((1, 2), -3, 0, foo, bar) equal (foo, bar, 1, 2),
  array-splice((1, 2), -3, 1, foo, bar) equal (foo, bar, 2),
  array-splice((1, 2), -3, 2, foo, bar) equal (foo, bar),
  array-splice((1, 2), -3, 3, foo, bar) equal (foo, bar),
));

@include assert("array-splice($array: array, $count: integer): should preserve separator and brackets", (
  array-is-bracketed(array-splice(1 2)) equal false,
  array-is-bracketed(array-splice(to-list(1 2, $is-bracketed: true))) equal true,
  array-separator(array-splice((1, 2))) equal comma,
  array-separator(array-splice(1 2)) equal space,
));

@include assert("array-splice($array: array, $start: integer, $count: integer, $values...: arglist): should validate passed params", (
    (array-splice, null) throws "ArgumentError: Invalid argument `$array` of `array-splice($array: array, $start: integer, $count: integer, $values...: arglist)`. Expected value of array, instead given null",
    (array-splice, (), null) throws "ArgumentError: Invalid argument `$start` of `array-splice($array: array, $start: integer, $count: integer, $values...: arglist)`. Expected value of integer, instead given null",
    (array-splice, (), 1, null) throws "ArgumentError: Invalid argument `$count` of `array-splice($array: array, $start: integer, $count: integer, $values...: arglist)`. Expected value of integer, instead given null",
));