@import "../assert";
@import "../spy";
@import "index";

@function ge($number, $value, $other...) {
  @return $number >= $value;
}

@include assert("array-filter($array: array, $callback: callable): Creates a new array with all elements that pass the test implemented by the provided callable", (
  array-filter((1, 11, 2, 12), (ge, 10)) equal (1, 2),
  array-filter((1, 2), (ge, 10)) equal (1, 2),
  array-filter((11, 12), (ge, 10)) equal (),
));

@include void() {
  $array: (11, 12, 13);
  $spy: spy((ge, 12));
  $result: array-every($array, (spy-call, $spy));

  @include assert("array-every($array: array, $callback: callable): should call passed callable with ($value: ?any, $index: number, $array: array)", (
    spy-length($spy) equal 3,
    spy-nth($spy, 1) equal (args: (11, 1, $array), return: true, error: null),
    spy-nth($spy, 2) equal (args: (12, 2, $array), return: true, error: null),
    spy-nth($spy, 3) equal (args: (13, 3, $array), return: false, error: null),
  ));
}

@include assert("array-filter($array: array, $values...: arglist): should preserve separator and brackets", (
  array-is-bracketed(array-filter(1 11, (ge, 10))) equal false,
  array-is-bracketed(array-filter(to-list(1 11, $is-bracketed: true), (ge, 10))) equal true,
  array-separator(array-filter((1, 11), (ge, 10))) equal comma,
  array-separator(array-filter(1 11, (ge, 10))) equal space,
));

@include assert("array-filter($array: array, $callback: callable): should validate passed params", (
    (array-filter, null) throws "ArgumentError: Invalid argument `$array` of `array-filter($array: array, $callback: callable)`. Expected value of array, instead given null",
    (array-filter, (), null) throws "ArgumentError: Invalid argument `$callback` of `array-filter($array: array, $callback: callable)`. Expected value of callable, instead given null",
));
