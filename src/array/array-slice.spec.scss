@import "../assert";
@import "to-list";
@import "array-is-bracketed";
@import "array-separator";
@import "array-slice";

@include assert("array-slice($list: array, $from: number, $to: ?number): returns a portion of a list selected from $start to $end ($end not included)", (
  array-slice((1, 2, 3)) equal (1, 2, 3),
  array-slice((foo: 1, bar: 2)) equal ((foo 1), (bar 2)),

  array-slice((1, 2, 3), 0) equal (1, 2, 3),
  array-slice((1, 2, 3), 0, 0) equal (),
  array-slice((1, 2, 3), 0, 100) equal (1, 2, 3),

  array-slice((1, 2, 3), 1) equal (1, 2, 3),
  array-slice((1, 2, 3), 1, 2) equal (1,),
  array-slice((1, 2, 3), 1, 3) equal (1, 2),
  array-slice((1, 2, 3), 1, -1) equal (1, 2),

  array-slice((1, 2, 3), 2) equal (2, 3),
  array-slice((1, 2, 3), 2, 3) equal (2,),

  array-slice((1, 2, 3), -1) equal (3,),
  array-slice((1, 2, 3), -1, -1) equal (()),

  array-slice((1, 2, 3), -2) equal (2, 3),

  array-slice((1, 2, 3), -3, -2) equal (1,),

  array-slice((), 1) equal (),
  array-slice((), -1, 1) equal (),
));

@include assert("array-slice($list: array, $from: number, $to: ?number): should preserve separator and brackets", (
  array-is-bracketed(array-slice(1 2)) equal false,
  array-is-bracketed(array-slice(to-list(1 2, $is-bracketed: true))) equal true,
  array-separator(array-slice((1, 2))) equal comma,
  array-separator(array-slice(1 2)) equal space,
));

@include assert("array-slice($list: array, $from: number, $to: ?number): should validate passed params", (
    (array-slice, 1) throws "ArgumentError: Invalid argument `$list` of `array-slice($list: array, $from: number, $to: ?number)`. Expected value of array, instead given { number } 1",
    (array-slice, (), foo) throws "ArgumentError: Invalid argument `$from` of `array-slice($list: array, $from: number, $to: ?number)`. Expected value of number, instead given { string } foo",
    (array-slice, (), 1, foo) throws "ArgumentError: Invalid argument `$to` of `array-slice($list: array, $from: number, $to: ?number)`. Expected value of ?number, instead given { string } foo",
));