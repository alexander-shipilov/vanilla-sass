@import "../../assert";
@import "../../core/to-string";
@import "../is-type";
@import "../is-type-of";
@import "integer";

$integer-type: integer();

@include assert("integer(?unit) creates a new integer type", (
  is-type(integer()) is-true,
  map-get(integer(), unit) equal null,
  map-get(integer("px"), unit) equal "px",
));

@include assert("to-string(integer($unit?))", (
  to-string(integer()) equal "integer",
  to-string(integer(px)) equal "integer(px)",
  to-string(integer("")) equal "integer(unitless)",
));

@include assert("is-type-of(integer($unit?), ?any)", (
  // true
  is-type-of(integer(), 1) is-true,
  is-type-of(integer(), 1px) is-true,
  is-type-of(integer(), 1em) is-true,
  is-type-of(integer(""), 1) is-true,
  is-type-of(integer("px"), 1px) is-true,
  is-type-of(integer(), 3px / 1em) is-true,
  is-type-of(integer("px/em"), 3px / 1em) is-true,
  // false
  is-type-of(integer(), 3px / 2em) is-false,
  is-type-of(integer("px/em"), 3px / 2em) is-false,
  is-type-of(integer(""), 1px) is-false,
  is-type-of(integer("em"), 1px) is-false,
  is-type-of(integer(), null) is-false,
  is-type-of(integer(), "1") is-false,
));

@include assert("integer(): should throw ArgumentError if invalid params passed", (
    (integer, 1) throws "ArgumentError: Invalid argument `$unit` of `integer($unit: ?string)`. Expected value of ?string, instead given { number } 1",
));