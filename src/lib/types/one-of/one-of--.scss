@import "../../constructor/new--";
@import "../../constructor/super";
@import "../../core/@void";
@import "../../global/global";
@import "../../list/list-some--";
@import "../type/--define-type";
@import "../type/--type-to-string";
@import "../is-value-of--";

/// @group types/one-of
/// @access private
@function --one-of-validate($value, $one-of, $other...) {
  @return list-some--(map-get($one-of, types), (is-value-of--, $value));
}

/// @group types/one-of
/// @access private
@function --one-of-to-string($one-of, $other...) {
  @return --type-to-string($one-of, map-get($one-of, types));
}

/// @group types/one-of
/// @access private
@function --one-of-constructor($types) {
  @if (not constructor-call-check()) {
    @return null;
  }

  @return map-merge(super(--one-of-validate), (
    types: $types,
    $to-string: --one-of-to-string
  ));
}

/// Unsafe one-of()
/// @group types/one-of
/// @see one-of
@function one-of--($types, $other...) {
  @return new--(global(one-of), $types);
}

@include void(--define-type(one-of, --one-of-constructor));