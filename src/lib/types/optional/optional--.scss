@import "../../constructor/instance-of--";
@import "../../constructor/new--";
@import "../../constructor/super";
@import "../../core/@void";
@import "../../core/to-string";
@import "../../global/global";
@import "../type/--define-type";
@import "../type/--type-to-string";
@import "../is-type-of--";

/// @group types/optional
/// @access private
@function --optional-validate($value, $optional, $other...) {
  @return $value == null or is-type-of--(map-get($optional, type), $value);
}

/// @group types/optional
/// @access private
@function --optional-to-string($optional, $other...) {
  @return "?#{ to-string(map-get($optional, type)) }";
}

/// @group types/optional
/// @access private
@function --optional-constructor($type) {
  @if (not constructor-call-check()) {
    @return null;
  }

  @return map-merge(super(--optional-validate), (
    type: $type,
    $to-string: --optional-to-string
  ));
}

/// Unsafe optional()
/// @group types/optional
/// @see optional
@function optional--($type, $other...) {
  @return if(instance-of--($type, global(optional)), $type, new--(global(optional), $type));
}

@function opt--($args...) {
  @return optional--($args...);
}

@include void(--define-type(optional, --optional-constructor));
