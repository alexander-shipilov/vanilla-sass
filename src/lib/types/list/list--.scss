@import "../../constructor/new--";
@import "../../constructor/super";
@import "../../core/@void";
@import "../../global/global";
@import "../../list/list-nth--";
@import "../type/--define-type";
@import "../type/--type-to-string";
@import "../is-type-of--";

/// @group types/list
/// @access private
@function --list-validate--($value, $list, $other...) {
  $is-list: is-list($value);
  $types: map-get($list, types);

  @if ($is-list and $types != null) {
    $index: 1;

    @each $type in $types {
      $is-list: is-type-of--($type, list-nth--($value, $index));

      @if (not $is-list) {
        @return false;
      }

      $index: $index + 1;
    }
  }

  @return $is-list;
}

/// @group types/list
/// @access private
@function --list-to-string($list, $other...) {
  $types: append(map-get($list, types), "...");

  @return --type-to-string($list, $types...);
}

/// @group types/list
/// @access private
@function --list-constructor($types) {
  @if (not constructor-call-check()) {
    @return null;
  }

  @return map-merge(super(--list-validate), (
    types: $types,
    $to-string: --list-to-string
  ));
}

/// Unsafe list()
/// @group types
/// @see list
@function list--($types, $other...) {
  @return new--(global(list), $types);
}

@include void(--define-type(list, --list-constructor));