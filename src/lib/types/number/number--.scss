@import "../../constructor/new--";
@import "../../constructor/super";
@import "../../core/@void";
@import "../../core/nvl";
@import "../../func/func-apply--";
@import "../../global/global";
@import "../type/--define-type";
@import "../type/--type-to-string";

/// @group types/number
/// @access private
@function --number-validate($value, $number, $other...) {
  $unit: map-get($number, unit);

  @return type-of($value) == number and ($unit == null or unit($value) == $unit);
}

/// @group types/number
/// @access private
@function --number-to-string($number, $other...) {
  $unit: map-get($number, unit);
  $args: ($number,);

  @if ($unit != null) {
    $args: append($args, if($unit == "", "unitless", $unit));
  }

  @return func-apply--(--type-to-string, $args);
}

/// @group types/number
/// @access private
@function --number-constructor($unit: null) {
  @if (not constructor-call-check()) {
    @return null;
  }

  @return map-merge(super(--number-validate), (
    unit: $unit,
    $to-string: --number-to-string
  ));
}

/// Unsafe number()
/// @group types/number
/// @see number
@function number--($unit: null, $other...) {
  @return new--(global(number), $unit);
}

@include void(--define-type(number, --number-constructor));