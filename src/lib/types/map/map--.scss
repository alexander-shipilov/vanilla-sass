@import "../../constructor/new--";
@import "../../constructor/super";
@import "../../core/@void";
@import "../../global/global";
@import "../../core/to-string";
@import "../../list/list-map--";
@import "../../list/list-join-with--";
@import "../type/--define-type";
@import "../type/--type-to-string";
@import "../is-map";
@import "../is-type-of--";

/// @group types/map
/// @access private
@function --map-validate($value, $map, $other...) {
  $is-map: is-map($value);
  $types: map-get($map, types);

  @if ($is-map and length($types) != 0) {
    @each $key, $type in $types {
      $is-map: is-type-of--($type, map-get($value, $key));

      @if (not $is-map) {
        @return false;
      }
    }
  }

  @return $is-map;
}

/// @group types/map
/// @access private
@function --map-item-to-string($map-item, $other...) {
  @return list-join-with--(list-map--($map-item, to-string), ": ");
}

/// @group types/map
/// @access private
@function --map-to-string($map, $other...) {
  $types: append(list-map--(map-get($map, types), --map-item-to-string), "...");

  @return --type-to-string($map, $types...);
}

/// @group types/map
/// @access private
@function --map-constructor($types, $other...) {
  @if (not constructor-call-check()) {
    @return null;
  }

  @return map-merge(super(--map-validate), (
    types: $types,
    $to-string: --map-to-string
  ));
}

/// Unsafe map()
/// @group types/map
/// @see map
@function map--($types, $other...) {
  @return new--(global(map), $types);
}

@include void(--define-type(map, --map-constructor));