@import "../assert";
@import "../spy";
@import "array-every";

@function --is-big-enough($value, $other...) {
  @return $value > 10;
}

@include assert("array-every($array: array, $callback: callable): tests whether all elements in the array pass the test implemented by the provided callable", (
  array-every((12, 5, 8, 130, 44), --is-big-enough) is-false,
  array-every((12, 54, 18, 130, 44), --is-big-enough) is-true,
  array-every((), --is-big-enough) is-true,
));

@include void() {
  $spy: spy(--is-big-enough);
  $result: array-every((11, 9, 12), (spy-call, $spy));

  @include assert("array-every($array: array, $callback: callable): should call passed callable with (current: any, index: number, array: array)", (
    $result is-false,
    spy-is-called($spy, 2) is-true,
    spy-is-called($spy, 3) is-false,
    spy-nth($spy, 1) equal (args: (11, 1, (11, 9, 12)), return: true, error: null),
  ));
}

@include assert("array-every($array: array, $callback: callable): should validate passed params", (
    (array-every, null) throws "ArgumentError: Invalid argument `$array` of `array-every($array: array, $callback: callable)`. Expected value of array, instead given null",
    (array-every, (), null) throws "ArgumentError: Invalid argument `$callback` of `array-every($array: array, $callback: callable)`. Expected value of callable, instead given null",
));
