@import "../func/func-call-unsafe--";
 @import "../types/optional/optional--";
@import "../types/one-of/one-of--";
@import "list-slice--";

/// Returns a copy of a portion of a list into a new list object selected from `$begin` to `$end` (`$end` not included).
/// @group list
///
/// @param { list } $list
///
/// @param { number } $begin [null] Index at which to begin extraction.
///   A negative index can be used, indicating an offset from the end of the sequence. slice(-2)
///   extracts the last two elements in the sequence.
///   If `$begin` is null (or omitted), `list-slice()` begins from index 1.
///   If `$begin` is greater than the length of the sequence, an empty list is returned.
/// @param { number } $end [null] Index before which to end extraction.
///   `list-slice()` extracts up to but **not including** end.
///   A negative index can be used, indicating an offset from the end of the sequence.
///   If `$end` is omitted, slice extracts through the end of the sequence (`length($list)`).
///   If `$end` is greater than the length of the sequence, slice extracts through to the end of the sequence.
/// @return { list }
///
/// @example
///
///   @debug list-slice((1, 2, 3, 4), 2, -1) // (2, 3) extracts the second element through the second-to-last element in the sequence.
///
@function list-slice($list, $begin: null, $end: null, $other...) {
  @return func-call-unsafe--(list-slice, (list: one-of--((list, map)) $list, from: opt--(number) $begin, to: opt--(number) $end));
}