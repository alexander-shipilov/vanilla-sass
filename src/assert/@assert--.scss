@import "../func/is-function";
@import "../array/is-array--";
@import "../core/@void";
@import "../core/throw";
@import "../core/try-catch--";
@import "../core/value-of";
@import "../func/func-to-string";
@import "../array/array-join--";
@import "../array/array-map--";
@import "../array/array-slice--";
@import "../string/str-replace";
@import "$assert-debug";

@function --assert-func($assertion) {
  $assert: assert;
  $args: ();

  @if (is-array--($assertion) and length($assertion) > 1) {
    $assert: "#{ $assert }-#{ nth($assertion, 2) }";

    @if (not is-function($assert)) {
      @return null;
    }

    $args: array-slice--($assertion, 3);
    $assertion: nth($assertion, 1);
  }

  @return join(($assert, $assertion), $args);
}

@function --assert-format($assertion) {
  $expression: nth($assertion, 1);

  @if (is-array--($assertion) and length($assertion) > 1) {
    $type: nth($assertion, 2);
    $args: array-slice--($assertion, 3);

    @if ($type == 'throws' or $type == 'does-not-throw') {
      $expression: "`#{ func-to-string($expression) }`";
    }

    $expression: "#{ to-string($expression) } #{ str-replace($type, '-', ' ') }";

    @if (length($args) != 0) {
      $expression: "#{ $expression } #{ array-join--(array-map--($args, to-string), " " ) }"
    }
  }

  @return $expression;
}

/// Unsafe @assert()
/// @group assert
/// @see @assert
@mixin assert--($message, $assertions, $other...) {
  $length: length($assertions);
  $debug: ("");
  $errors: ();

  $debug: join($debug, ("", "Assertion `#{ $message}` (#{ $length }):", ""));

  @if ($length != 0) {
    @for $index from 1 through $length {
      $assertion: nth($assertions, $index);
      $assert: --assert-func($assertion);

      $error: if($assert == null, "TypeError: Invalid assertion", try-catch--($assert));

      $debug: append($debug, "    #{ if($error == null, "✔", "✖") } #{ $index }: #{ --assert-format($assertion) }");

      @if ($error != null) {
        $errors: append($errors, $error);
      }
    }
  }

  $debug: append($debug, "");

  @if ($assert-debug) {
    @debug array-join--($debug, "\000A");
  }

  @if (length($errors) != 0) {
    @each $error in $errors {
      @warn $error;
    }

    @error "Assertion failed";
  }
}